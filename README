NAME
    Class::Inline - Create inline classes in a single line

DESCRIPTION
    I'm not entirely sure why you'd need this module, or if it belongs in
    the Acme namespace, but I find it fun. Class::Inline allows you to
    create a class, or instance into a variable by calling "class". Yep,
    that's it. Well, it has a tiny meta protocol behind it that allows you
    to create methods on the fly, extend your object and even return a list
    of its superclasses.

SYNTAX
        use Class::Inline; # imports warnings/strict, state, say

        # simple class
        my $foo = class {} object;

        # make it more useful by adding a method
        $foo->_meta->method('greet', sub { say "Hello $_[1]!" });

        # we can now call it
        $foo->greet("World");

    You can extend normal classes, or even other Class::Inline instances

        my $bar = class {} $foo;
        $bar->greet("Universe");

METHODS
  class
    Returns a Class::Inline::Object class with a unique identifier. Requires
    a coderef followed by a base class. At the least you should use
    "Object", or the exported function "object".

        my $foo = class {} object;

    Which is really, just

        my $foo = class {} "Object";

  object
    Returns a string called "Object". Yeah, that's it. Mainly for
    convenience and to make the syntax look prettier.

  lambda
    Class::Inline exports a method called lambda you can use to iterate over
    hash or array references in an anonymous subroutine. Check it out!

        my @a = qw(foo bar world);
        lambda {
            say $_[0]
        } \@a; 
    
        my $h = { "foo" => "bar", "hello" => "world" };
    
        lambda {
            my ($key, $value) = @_;
            say $key . ' => ' . $value;
        } $h;

